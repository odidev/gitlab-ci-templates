#
# Gitlab-CI job templates for RHEL jobs
#

# find yum/dnf
.set-dnf-variable: &set-dnf-variable
  if command -v yum &> /dev/null; then
      DNF="yum";
  else
      DNF="dnf";
  fi

# disable repos the user doesn't want
.disable-repos: &disable-repos
  _config_manager_args="--disable ${DISABLE_REPOS}" &&
  _install_args="--disablerepo ${DISABLE_REPOS/ /,}" &&
  if [ -z "${DISABLE_REPOS}" ]; then
      true;
  elif command -v yum &> /dev/null; then
      yum -y -q install ${_install_args} "yum-utils" &&
      yum-config-manager ${_config_manager_args} 1>/dev/null;
  else
      dnf -y -q install ${_install_args} "dnf-command(config-manager)" &&
      dnf config-manager ${_config_manager_args};
  fi

# configure yum/dnf to cache packages locally
.configure-rpm-cache: &configure-rpm-cache
  _config_manager_args="--save --setopt=cachedir=${RPM_CACHE_DIR:=${CI_PROJECT_DIR}/.cache/rpm} --setopt=keepcache=1" &&
  if command -v yum &> /dev/null; then
      yum -y -q install "yum-utils" &&
      yum-config-manager ${_config_manager_args} 1>/dev/null;
  else
      dnf -y -q install "dnf-command(config-manager)" &&
      dnf config-manager ${_config_manager_args};
  fi

# enable the powertools repo for Centos 8
.enable-powertools: &enable-powertools
  if grep -q "rockylinux:8" /etc/os-release && [ "${POWERTOOLS}" = true ]; then
      dnf -y -q install dnf-plugins-core &&
      dnf config-manager --set-enabled powertools;
  fi

# install and configure EPEL
.install-epel: &install-epel
  if [ "${EPEL}" = true ]; then
      if command -v yum &> /dev/null; then
          yum -y -q install epel-release && yum -y -q install epel-rpm-macros;
      else
          dnf -y -q install epel-release && dnf -y -q install epel-rpm-macros;
      fi
  fi

# -- RHEL caching -----------
# configure yum/dnf to cache
# RPMs locally and gitlab-ci
# to cache the cache
# ---------------------------

.rhel:cache:
  variables:
    RPM_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/rpm"
  before_script:
    - *configure-rpm-cache
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .cache/rpm

# -- generic job ------------
# default job template for
# RHEL-based jobs, including
# caching and hooks for EPEL
# and CentOS 8 PowerTools
# ---------------------------

.rhel:base:
  extends:
    - .rhel:cache
  variables:
    EPEL: "false"
    POWERTOOLS: "false"
  before_script:
    - *set-dnf-variable
    - *disable-repos
    - *configure-rpm-cache
    - *enable-powertools
    - *install-epel

# -- SRPM build -------------
# build an SRPM from a
# tarball
# ---------------------------

.rhel:srpm:
  extends:
    - .rhel:base
  image: centos
  variables:
    # if 'true' enable EPEL repo
    EPEL: "false"
    # probably don't need the git repo
    GIT_STRATEGY: none
    # if 'true' enable CentOS PowerTools repo
    POWERTOOLS: "false"
    # options to pass to rpmbuild
    RPMBUILD_OPTIONS: ""
    # packages to install for SRPM
    SRPM_DEPENDENCIES: ""
  before_script:
    # standard config
    # NOTE: we don't use !reference tags here because
    # [DMM] they don't support nesting, and we want
    #       users to be able to use !reference tags
    - *set-dnf-variable
    - *disable-repos
    - *configure-rpm-cache
    - *enable-powertools
    - *install-epel
    - ${DNF} -y -q install
          findutils
          rpm-build
          ${SRPM_DEPENDENCIES}
  script:
    # build the src.rpm
    - xargs -t rpmbuild -ts --define "_srcrpmdir ${CI_PROJECT_DIR}" ${TARBALL:="${CI_PROJECT_NAME}*.tar.*"} <<< ${RPMBUILD_OPTIONS}
  artifacts:
    paths:
      - "*.src.rpm"

# -- binary RPM build -------
# build an RPM from an SRPM
# ---------------------------

.rhel:rpm:
  extends:
    - .rhel:base
  image: centos
  variables:
    # if 'true' enable EPEL repo
    EPEL: "false"
    # probably don't need the git repo
    GIT_STRATEGY: none
    # if 'true' enable CentOS PowerTools repo
    POWERTOOLS: "false"
    # options to pass to rpmbuild
    RPMBUILD_OPTIONS: ""
  before_script:
    # standard config
    # NOTE: we don't use !reference tags here because
    # [DMM] they don't support nesting, and we want
    #       users to be able to use !reference tags
    - *set-dnf-variable
    - *disable-repos
    - *configure-rpm-cache
    - *enable-powertools
    - *install-epel
    # install rpmbuild and yum-builddep
    - ${DNF} -y -q install
          findutils
          rpm-build
          yum-utils
  script:
    # install build dependencies for src rpm
    - yum-builddep -y ${SRPM:="${CI_PROJECT_NAME}-*.src.rpm"}
    # build binary rpms and move them into this directory
    - xargs -t rpmbuild --rebuild --define "_rpmdir $(pwd)" ${SRPM} <<< ${RPMBUILD_OPTIONS}
    # list the contents of the rpms
    - for rpmf in */*.rpm; do
          rpmname=$(basename ${rpmf}) &&
          echo "===== ${rpmname}" &&
          rpm -qp --info "${rpmf}" &&
          echo "-- Files:" &&
          rpm -qp --list "${rpmf}" &&
          echo "-- Provides:" &&
          rpm -qp --provides "${rpmf}" &&
          echo "-- Conflicts:" &&
          rpm -qp --conflicts "${rpmf}" &&
          echo "-- Requires:" &&
          rpm -qp --requires "${rpmf}";
      done
    # archive the rpms in the base directory
    - mv -v */*.rpm .
  artifacts:
    paths:
      - "*.rpm"
    exclude:
      - "*.src.rpm"

# -- lint RPMs --------------
# run rpmlint against a set
# of RPMs
# ---------------------------

.rhel:lint:
  extends:
    - .rhel:base
  image: rockylinux:8
  variables:
    # probably don't need the git repo
    GIT_STRATEGY: none
    # options to pass to rpmlint
    RPMLINT_OPTIONS: '--info'
    # RPMs to lint
    RPMS: '*.rpm'
  before_script:
    # standard config
    # NOTE: we don't use !reference tags here because
    # [DMM] they don't support nesting, and we want
    #       users to be able to use !reference tags
    - *set-dnf-variable
    - *disable-repos
    - *configure-rpm-cache
    - *enable-powertools
    - *install-epel
    # install rpmlint
    - ${DNF} -y -q install
          rpmlint
  script:
    # write the raw output to a file to record as an artefact
    - if [[ "${RPMLINT_OPTIONS}" != *"rawout"* ]]; then RPMLINT_OPTIONS="${RPMLINT_OPTIONS} --rawout rpmlint.log"; fi
    # run rpmlint
    - set -- ${RPMLINT_OPTIONS}
    - rpmlint "$@" ${RPMS}
  artifacts:
    paths:
      - rpmlint.log
